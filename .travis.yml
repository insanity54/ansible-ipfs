---
sudo: required

env:
  - distribution: centos
    version: 6
    init: /sbin/init
    run_opts: ""
    playbook: test.yml
  - distribution: centos
    version: 7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    playbook: test.yml
  - distribution: ubuntu
    version: 14.04
    init: /sbin/init
    run_opts: ""
    playbook: test.yml
  - distribution: ubuntu
    version: 12.04
    init: /sbin/init
    run_opts: ""
    playbook: test.yml

services:
  - docker

before_install:
  # Pull container
  - 'sudo docker pull ${distribution}:${version}'
  # Customize container
  - 'sudo docker build --rm=true --file=tests/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible tests'

script:
  - container_id=$(mktemp)

  # Run container in detached state
  - 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/ansible-ipfs:ro ${run_opts} ${distribution}-${version}:ansible "${init}" > "${container_id}"'

  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/ansible-ipfs/tests/${playbook} --syntax-check'

  # Ansible role  check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/ansible-ipfs/tests/${playbook}'

  # Test role idempotence.
  - >
    sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/ansible-ipfs/tests/${playbook}
#| grep 'changed=0.*failed=0'

#&& (echo 'Idempotence test: pass' && exit 0)
#|| (echo 'Idempotence test: fail' && exit 1)



  - >
    sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm /bin/bash -c "curl 'http://localhost:5001/api/v0/object/get?arg=QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme&stream-channels=true' --compressed
    | grep 'Hello and Welcome to IPFS!'"

  # Test ipfs server use running.
  - >
    sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm /bin/bash -c "service ipfs status
    | grep 'ipfs.*running'
    && (echo 'Service ipfs test: pass' && exit 0)
    || (echo 'Service ipfs test: fail' && exit 1)"


  # Verify that we can see the web api
  - >
    sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm /bin/bash -c "curl -s 'http://localhost:5001/api/v0/object/get?arg=QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme&stream-channels=true' --compressed 2>/dev/null
    | grep 'Hello and Welcome to IPFS!'
    && (echo 'Web API test: pass' && exit 0)
    || (echo 'Web API test: fail' && exit 1)"


  # Verify that the gateway is usable
  - >
    sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm /bin/bash -c "curl -s 'http://localhost:8080/ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme' --compressed 2>/dev/null
    | grep 'Hello and Welcome to IPFS!'
    && (echo 'Web gateway test: pass' && exit 0)
    || (echo 'Web gateway test: fail' && exit 1)"


  # Verify that the swarm port is open
  - >
    sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm /bin/bash -c "curl -s 'http://localhost:4001/' --compressed 2>/dev/null
    | grep -q 'Blowfish*'
    && (echo 'Web gateway test: pass' && exit 0)
    || (echo 'Web gateway test: fail' && exit 1)"

  # Clean up
  - sudo docker stop "$(cat ${container_id})"

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
